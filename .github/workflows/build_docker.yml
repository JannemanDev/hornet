name: Build Docker

on:
  push:
    branch:
      - master

jobs:
  build:
    name: Build Docker
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        
      - name: Setting env
        run: echo "GIT_SHA=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV 

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: AWS login
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Docker login
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}          

      - name: Build HORNET Docker image
        run: docker build . -f docker/Dockerfile.dev -t iotaledger/hornet:$GIT_SHA --load
        
      - name: Test HORNET Docker image
        run: docker run --rm --name hornet iotaledger/hornet:$GIT_SHA --version 2>/dev/null | grep -q "HORNET"
        
      - name: Build and push Hornet - ECR 
        run: docker build . -f docker/Dockerfile.dev -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/hornet:$GIT_SHA -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/hornet:latest --platform linux/amd64,linux/arm64 --push
          
      - name: Docker push - Release
        run: |
          export RELEASE_VERSION=${GITHUB_REF#refs/*/}
          docker build . -f docker/Dockerfile.dev -t iotaledger/hornet:$GIT_SHA -t iotaledger/hornet:$RELEASE_VERSION -t iotaledger/hornet:$GIT_SHA iotaledger/hornet:latest -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/hornet:$RELEASE_VERSION --platform linux/amd64,linux/arm64 --push
        if: startsWith(github.ref, 'refs/tags/v')

      - name: Passing env var to deploy job
        id: git_sha
        run: echo "::set-output name=git_sha::${{ env.GIT_SHA }}"

    outputs:
      git_sha: ${{ steps.git_sha.outputs.git_sha }}

  trigger-deploy:
    name: Triggering deployment
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Triggering Hornet deployment
        run: |
          curl -X POST https://api.github.com/repos/iotaledger/hornet/deployments \
          -H 'Accept: application/vnd.github.v3+json' \
          -u ${{ secrets.GIT_TOKEN }} \
          --data '{"ref": "${{ needs.build.outputs.git_sha }}", "task": "deploy", "automerge": false, "required_contexts": [], "payload": {}, "environment": "comnet", "description": "", "transient_environment": false, "production_environment": false}'